{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://angular-archwizard/lib/directives/wizard-step-symbol.directive.ts","ng://angular-archwizard/lib/directives/wizard-step-title.directive.ts","ng://angular-archwizard/lib/util/wizard-step.interface.ts","ng://angular-archwizard/lib/util/wizard-completion-step.interface.ts","ng://angular-archwizard/lib/components/wizard-completion-step.component.ts","ng://angular-archwizard/lib/util/moving-direction.enum.ts","ng://angular-archwizard/lib/navigation/navigation-mode.interface.ts","ng://angular-archwizard/lib/navigation/free-navigation-mode.ts","ng://angular-archwizard/lib/navigation/semi-strict-navigation-mode.ts","ng://angular-archwizard/lib/navigation/strict-navigation-mode.ts","ng://angular-archwizard/lib/navigation/navigation-mode.provider.ts","ng://angular-archwizard/lib/navigation/wizard-state.model.ts","ng://angular-archwizard/lib/components/wizard-navigation-bar.component.ts","ng://angular-archwizard/lib/components/wizard-step.component.ts","ng://angular-archwizard/lib/components/wizard.component.ts","ng://angular-archwizard/lib/directives/enable-back-links.directive.ts","ng://angular-archwizard/lib/util/step-id.interface.ts","ng://angular-archwizard/lib/util/step-index.interface.ts","ng://angular-archwizard/lib/util/step-offset.interface.ts","ng://angular-archwizard/lib/directives/go-to-step.directive.ts","ng://angular-archwizard/lib/directives/next-step.directive.ts","ng://angular-archwizard/lib/directives/optional-step.directive.ts","ng://angular-archwizard/lib/directives/previous-step.directive.ts","ng://angular-archwizard/lib/directives/reset-wizard.directive.ts","ng://angular-archwizard/lib/directives/selected-step.directive.ts","ng://angular-archwizard/lib/directives/wizard-completion-step.directive.ts","ng://angular-archwizard/lib/directives/wizard-step.directive.ts","ng://angular-archwizard/lib/archwizard.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","WizardStepSymbolDirective","templateRef","Directive","args","selector","TemplateRef","WizardStepTitleDirective","WizardStep","navigationSymbol","symbol","completed","selected","defaultSelected","optional","canEnter","canExit","stepEnter","EventEmitter","stepExit","defineProperty","canTransitionStep","condition","direction","Promise","resolve","Function","reject","Error","enter","emit","exit","canEnterStep","canExitStep","ContentChild","Input","Output","HostBinding","WizardCompletionStep","_this","_super","apply","arguments","tslib_1.__extends","WizardCompletionStepComponent","Component","template","encapsulation","ViewEncapsulation","None","providers","provide","useExisting","forwardRef","Forwards","Backwards","Stay","NavigationMode","wizardState","goToPreviousStep","preFinalize","postFinalize","hasPreviousStep","goToStep","currentStepIndex","goToNextStep","hasNextStep","FreeNavigationMode","call","canGoToStep","destinationIndex","hasStep","movingDirection","getMovingDirection","then","previous","currentStep","getStepAtIndex","navigationAllowed","MovingDirection","isNavigable","reset","defaultStepIndex","wizardSteps","forEach","step","SemiStrictNavigationMode","allNormalStepsCompleted","filter","index","every","length","StrictNavigationMode","some","navigationModeFactory","navigationMode","WizardState","_defaultStepIndex","foundDefaultStep","find","getIndexOfStep","updateNavigationMode","updatedNavigationMode","updateWizardSteps","updatedWizardSteps","indexOf","stepIndex","isLastStep","getIndexOfStepWithId","stepId","findIndex","destinationStep","Injectable","WizardNavigationBarComponent","slice","reverse","isCurrent","wizardStep","isDone","isDefault","isEditing","isOptional","disableNavigationBar","WizardStepComponent","WizardComponent","model","navBarLocation","navBarLayout","navBarDirection","ngOnChanges","changes","_b","__values","o","m","Symbol","iterator","i","next","value","done","tslib_1.__values","keys","_c","propName","change","firstChange","parseInt","currentValue","ngAfterContentInit","subscribe","changedWizardSteps","toArray","navigation","ContentChildren","EnableBackLinksDirective","completionStep","ngOnInit","decorators","type","Host","isStepId","isStepIndex","isStepOffset","GoToStepDirective","emitter","targetStep","stepOffset","onClick","event","Optional","HostListener","NextStepDirective","OptionalStepDirective","PreviousStepDirective","ResetWizardDirective","finalize","SelectedStepDirective","WizardCompletionStepDirective","WizardStepDirective","ArchwizardModule","forRoot","ngModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {Directive, TemplateRef} from '@angular/core';\n\n/**\n * The `awWizardStepSymbol` directive can be used as an alternative to the `navigationSymbol` input of a [[WizardStep]]\n * to define the step symbol inside the navigation bar.  This way step symbol may contain arbitrary content.\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepSymbol>\n *     ...\n * </ng-template>\n * ```\n */\n@Directive({\n  selector: 'ng-template[awStepSymbol], ng-template[awWizardStepSymbol]'\n})\nexport class WizardStepSymbolDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepSymbolDirective]]\n   */\n  constructor(public templateRef: TemplateRef<any>) {\n  }\n}\n","import {Directive, TemplateRef} from '@angular/core';\n\n/**\n * The `awWizardStepTitle` directive can be used as an alternative to the `stepTitle` input of a [[WizardStep]]\n * to define the content of a step title inside the navigation bar.\n * This step title can be freely created and can contain more than only plain text\n *\n * ### Syntax\n *\n * ```html\n * <ng-template awWizardStepTitle>\n *     ...\n * </ng-template>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: 'ng-template[awStepTitle], ng-template[awWizardStepTitle]'\n})\nexport class WizardStepTitleDirective {\n  /**\n   * Constructor\n   *\n   * @param templateRef A reference to the content of the `ng-template` that contains this [[WizardStepTitleDirective]]\n   */\n  constructor(public templateRef: TemplateRef<any>) {\n  }\n}\n","import {ContentChild, EventEmitter, HostBinding, Input, Output} from '@angular/core';\nimport {WizardStepSymbolDirective} from '../directives/wizard-step-symbol.directive';\nimport {WizardStepTitleDirective} from '../directives/wizard-step-title.directive';\nimport {MovingDirection} from './moving-direction.enum';\nimport {NavigationSymbol} from './navigation-symbol.interface';\n\n/**\n * Basic functionality every type of wizard step needs to provide\n *\n * @author Marc Arndt\n */\nexport abstract class WizardStep {\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is then shown inside the navigation bar.\n   * Compared to `stepTitle` this property can contain any html content and not only plain text\n   */\n  @ContentChild(WizardStepTitleDirective)\n  public stepTitleTemplate: WizardStepTitleDirective;\n\n  /**\n   * A step symbol property that, if defined, overrides `navigationSymbol`.\n   * Allows to display arbitrary content as a step symbol instead of plain text.\n   */\n  @ContentChild(WizardStepSymbolDirective)\n  public stepSymbolTemplate: WizardStepSymbolDirective;\n\n  /**\n   * A step id, unique to the step\n   */\n  @Input()\n  public stepId: string;\n\n  /**\n   * A step title property, which contains the visible header title of the step.\n   * This title is only shown inside the navigation bar, if `stepTitleTemplate` is not defined or null.\n   */\n  @Input()\n  public stepTitle: string;\n\n  /**\n   * A symbol property, which contains an optional symbol for the step inside the navigation bar.\n   * Takes effect when `stepSymbolTemplate` is not defined or null.\n   */\n  @Input()\n  public navigationSymbol: NavigationSymbol = {symbol: ''};\n\n  /**\n   * A boolean describing if the wizard step has been completed\n   */\n  public completed = false;\n\n  /**\n   * A boolean describing if the wizard step is currently selected\n   */\n  public selected = false;\n\n  /**\n   * A boolean describing, if the wizard step should be selected by default, i.e. after the wizard has been initialized as the initial step\n   */\n  public defaultSelected = false;\n\n  /**\n   * A boolean describing if the wizard step is an optional step\n   */\n  public optional = false;\n\n  /**\n   * A function or boolean deciding, if this step can be entered\n   */\n  @Input()\n  public canEnter: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * A function or boolean deciding, if this step can be exited\n   */\n  @Input()\n  public canExit: ((direction: MovingDirection) => boolean) | ((direction: MovingDirection) => Promise<boolean>) | boolean = true;\n\n  /**\n   * This [[EventEmitter]] is called when the step is entered.\n   * The bound method should be used to do initialization work.\n   */\n  @Output()\n  public stepEnter: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * This [[EventEmitter]] is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit: EventEmitter<MovingDirection> = new EventEmitter<MovingDirection>();\n\n  /**\n   * Returns if this wizard step should be visible to the user.\n   * If the step should be visible to the user false is returned, otherwise true\n   */\n  @HostBinding('hidden')\n  public get hidden(): boolean {\n    return !this.selected;\n  }\n\n  /**\n   * This method returns true, if this wizard step can be transitioned with a given direction.\n   * Transitioned in this case means either entered or exited, depending on the given `condition` parameter.\n   *\n   * @param condition A condition variable, deciding if the step can be transitioned\n   * @param direction The direction in which this step should be transitioned\n   * @returns A [[Promise]] containing `true`, if this step can transitioned in the given direction\n   * @throws An `Error` is thrown if `condition` is neither a function nor a boolean\n   */\n  private static canTransitionStep(condition: ((direction: MovingDirection) => boolean) |\n                                     ((direction: MovingDirection) => Promise<boolean>) |\n                                     boolean,\n                                   direction: MovingDirection): Promise<boolean> {\n    if (typeof(condition) === typeof(true)) {\n      return Promise.resolve(condition as boolean);\n    } else if (condition instanceof Function) {\n      return Promise.resolve(condition(direction));\n    } else {\n      return Promise.reject(new Error(`Input value '${condition}' is neither a boolean nor a function`));\n    }\n  }\n\n  /**\n   * A function called when the step is entered\n   *\n   * @param direction The direction in which the step is entered\n   */\n  public enter(direction: MovingDirection): void {\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * A function called when the step is exited\n   *\n   * @param direction The direction in which the step is exited\n   */\n  public exit(direction: MovingDirection) {\n    this.stepExit.emit(direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be entered from the given direction.\n   * Because this method depends on the value `canEnter`, it will throw an error, if `canEnter` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be entered\n   * @returns A [[Promise]] containing `true`, if the step can be entered in the given direction, false otherwise\n   * @throws An `Error` is thrown if `anEnter` is neither a function nor a boolean\n   */\n  public canEnterStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canEnter, direction);\n  }\n\n  /**\n   * This method returns true, if this wizard step can be exited into given direction.\n   * Because this method depends on the value `canExit`, it will throw an error, if `canExit` is neither a boolean\n   * nor a function.\n   *\n   * @param direction The direction in which this step should be left\n   * @returns A [[Promise]] containing `true`, if the step can be exited in the given direction, false otherwise\n   * @throws An `Error` is thrown if `canExit` is neither a function nor a boolean\n   */\n  public canExitStep(direction: MovingDirection): Promise<boolean> {\n    return WizardStep.canTransitionStep(this.canExit, direction);\n  }\n}\n","import {EventEmitter} from '@angular/core';\nimport {WizardStep} from './wizard-step.interface';\nimport {MovingDirection} from './moving-direction.enum';\n\n/**\n * Basic functionality every wizard completion step needs to provide\n *\n * @author Marc Arndt\n */\nexport abstract class WizardCompletionStep extends WizardStep {\n  /**\n   * @inheritDoc\n   */\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * @inheritDoc\n   */\n  public canExit: ((direction: MovingDirection) => boolean) | boolean = false;\n\n  /**\n   * @inheritDoc\n   */\n  public enter(direction: MovingDirection): void {\n    this.completed = true;\n    this.stepEnter.emit(direction);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public exit(direction: MovingDirection): void {\n    // set this completion step as incomplete\n    this.completed = false;\n    this.stepExit.emit(direction);\n  }\n}\n","import {Component, forwardRef, ViewEncapsulation} from '@angular/core';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `aw-wizard-completion-step` component can be used to define a completion/success step at the end of your wizard\n * After a `aw-wizard-completion-step` has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a `aw-wizard-completion-step` automatically sets the `aw-wizard` and all steps inside the `aw-wizard`\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'navigation symbol font family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-completion-step',\n  templateUrl: 'wizard-completion-step.component.html',\n  styleUrls: ['wizard-completion-step.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepComponent)},\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepComponent)}\n  ]\n})\nexport class WizardCompletionStepComponent extends WizardCompletionStep {\n}\n","/**\n * The direction in which a step transition was made\n *\n * @author Marc Arndt\n */\n\n/**\n * This enum contains the different possible moving directions in which a wizard can be traversed\n *\n * @author Marc Arndt\n */\nexport enum MovingDirection {\n  /**\n   * A forward step transition\n   */\n  Forwards,\n  /**\n   * A backward step transition\n   */\n  Backwards,\n  /**\n   * No step transition was done\n   */\n  Stay\n}\n","import {WizardState} from './wizard-state.model';\nimport {EventEmitter} from '@angular/core';\n\n/**\n * An interface describing the basic functionality, which must be provided by a navigation mode.\n * A navigation mode manages the navigation between different wizard steps, this contains the validation, if a step transition can be done\n *\n * @author Marc Arndt\n */\nexport abstract class NavigationMode {\n  constructor(protected wizardState: WizardState) {\n  }\n\n  /**\n   * Checks, whether a wizard step, as defined by the given destination index, can be transitioned to.\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns A [[Promise]] containing `true`, if the destination step can be transitioned to and false otherwise\n   */\n  abstract canGoToStep(destinationIndex: number): Promise<boolean>;\n\n  /**\n   * Tries to transition to the wizard step, as denoted by the given destination index.\n   * If this is not possible, the current wizard step should be exited and then reentered with `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination step\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  abstract goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void;\n\n  /**\n   * Checks, whether the wizard step, located at the given index, is can be navigated to\n   *\n   * @param destinationIndex The index of the destination step\n   * @returns True if the step can be navigated to, false otherwise\n   */\n  abstract isNavigable(destinationIndex: number): boolean;\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  abstract reset(): void;\n\n  /**\n   * Tries to transition the wizard to the previous step from the `currentStep`\n   */\n  goToPreviousStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    if (this.wizardState.hasPreviousStep()) {\n      this.goToStep(this.wizardState.currentStepIndex - 1, preFinalize, postFinalize);\n    }\n  }\n\n  /**\n   * Tries to transition the wizard to the next step from the `currentStep`\n   */\n  goToNextStep(preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    if (this.wizardState.hasNextStep()) {\n      this.goToStep(this.wizardState.currentStepIndex + 1, preFinalize, postFinalize);\n    }\n  }\n}\n","import {EventEmitter} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {NavigationMode} from './navigation-mode.interface';\nimport {WizardState} from './wizard-state.model';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate without any limitations,\n * as long as the current step can be exited in the given direction\n *\n * @author Marc Arndt\n */\nexport class FreeNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  isNavigable(destinationIndex: number): boolean {\n    return true;\n  }\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n","import {EventEmitter} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {NavigationMode} from './navigation-mode.interface';\nimport {WizardState} from './wizard-state.model';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate with some limitations.\n * The user can only navigation to a given destination step, if:\n * - the current step can be exited in the direction of the destination step\n * - a completion step can only be entered, if all \"normal\" wizard steps have been completed\n *\n * @author Marc Arndt\n */\nexport class SemiStrictNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The model/state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - all \"normal\" wizard steps have been completed, are optional or selected, or the destination step isn't a completion step\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    // provide the destination step as a lambda in case the index doesn't exist (i.e. hasStep === false)\n    const destinationStep = (previous: boolean) => {\n      if (previous) {\n        const allNormalStepsCompleted = this.wizardState.wizardSteps\n          .filter((step, index) => index < destinationIndex)\n          .every(step => step.completed || step.optional || step.selected);\n\n        return Promise.resolve(\n          !(this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) || allNormalStepsCompleted);\n      } else {\n        return Promise.resolve(false);\n      }\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep)\n      .then(destinationStep);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        // the current step can be exited in the given direction\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isNavigable(destinationIndex: number): boolean {\n    if (this.wizardState.getStepAtIndex(destinationIndex) instanceof WizardCompletionStep) {\n      // a completion step can only be entered, if all previous steps have been completed, are optional, or selected\n      return this.wizardState.wizardSteps.filter((step, index) => index < destinationIndex)\n        .every(step => step.completed || step.optional || step.selected);\n    } else {\n      // a \"normal\" step can always be entered\n      return true;\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // the default step is a completion step and the wizard contains more than one step\n    const defaultCompletionStep = this.wizardState.getStepAtIndex(this.wizardState.defaultStepIndex) instanceof WizardCompletionStep &&\n      this.wizardState.wizardSteps.length !== 1;\n\n    if (defaultCompletionStep) {\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} references a completion step`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n","import {EventEmitter} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {NavigationMode} from './navigation-mode.interface';\nimport {WizardState} from './wizard-state.model';\n\n/**\n * A [[NavigationMode]], which allows the user to navigate with strict limitations.\n * The user can only navigation to a given destination step, if:\n * - the current step can be exited in the direction of the destination step\n * - all previous steps to the destination step have been completed or are optional\n *\n * @author Marc Arndt\n */\nexport class StrictNavigationMode extends NavigationMode {\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard, that is configured with this navigation mode\n   */\n  constructor(wizardState: WizardState) {\n    super(wizardState);\n  }\n\n  /**\n   * Checks whether the wizard can be transitioned to the given destination step.\n   * A destination wizard step can be entered if:\n   * - it exists\n   * - the current step can be exited in the direction of the destination step\n   * - all previous steps to the destination step have been completed or are optional\n   *\n   * @param destinationIndex The index of the destination wizard step\n   * @returns True if the destination wizard step can be entered, false otherwise\n   */\n  canGoToStep(destinationIndex: number): Promise<boolean> {\n    const hasStep = this.wizardState.hasStep(destinationIndex);\n\n    const movingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n    const canExitCurrentStep = (previous: boolean) => {\n      return previous ? this.wizardState.currentStep.canExitStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const canEnterDestinationStep = (previous: boolean) => {\n      return previous ? this.wizardState.getStepAtIndex(destinationIndex).canEnterStep(movingDirection) : Promise.resolve(false);\n    };\n\n    const allPreviousStepsComplete = (previous: boolean) => {\n      if (previous) {\n        return Promise.resolve(this.wizardState.wizardSteps\n          .filter((step, index) => index < destinationIndex && index !== this.wizardState.currentStepIndex)\n          .every(step => step.completed || step.optional)\n        );\n      } else {\n        return Promise.resolve(false);\n      }\n    };\n\n    return Promise.resolve(hasStep)\n      .then(canExitCurrentStep)\n      .then(canEnterDestinationStep)\n      .then(allPreviousStepsComplete);\n  }\n\n  /**\n   * Tries to enter the wizard step with the given destination index.\n   * When entering the destination step, the following actions are done:\n   * - the old current step is set as completed\n   * - the old current step is set as unselected\n   * - the old current step is exited\n   * - all steps between the old current step and the destination step are marked as incomplete\n   * - the destination step is set as selected\n   * - the destination step is entered\n   *\n   * When the destination step couldn't be entered, the following actions are done:\n   * - the current step is exited and entered in the direction `MovingDirection.Stay`\n   *\n   * @param destinationIndex The index of the destination wizard step, which should be entered\n   * @param preFinalize An event emitter, to be called before the step has been transitioned\n   * @param postFinalize An event emitter, to be called after the step has been transitioned\n   */\n  goToStep(destinationIndex: number, preFinalize?: EventEmitter<void>, postFinalize?: EventEmitter<void>): void {\n    this.canGoToStep(destinationIndex).then(navigationAllowed => {\n      if (navigationAllowed) {\n        const movingDirection: MovingDirection = this.wizardState.getMovingDirection(destinationIndex);\n\n        /* istanbul ignore if */\n        if (preFinalize) {\n          preFinalize.emit();\n        }\n\n        // leave current step\n        this.wizardState.currentStep.completed = true;\n        this.wizardState.currentStep.exit(movingDirection);\n        this.wizardState.currentStep.selected = false;\n\n        // set all steps after the destination step to incomplete\n        this.wizardState.wizardSteps\n          .filter((step, index) => this.wizardState.currentStepIndex > destinationIndex && index > destinationIndex)\n          .forEach(step => step.completed = false);\n\n        this.wizardState.currentStepIndex = destinationIndex;\n\n        // go to next step\n        this.wizardState.currentStep.enter(movingDirection);\n        this.wizardState.currentStep.selected = true;\n\n        /* istanbul ignore if */\n        if (postFinalize) {\n          postFinalize.emit();\n        }\n      } else {\n        // if the current step can't be left, reenter the current step\n        this.wizardState.currentStep.exit(MovingDirection.Stay);\n        this.wizardState.currentStep.enter(MovingDirection.Stay);\n      }\n    });\n  }\n\n  isNavigable(destinationIndex: number): boolean {\n    // a wizard step can be navigated to through the navigation bar, iff it's located before the current wizard step\n    return destinationIndex < this.wizardState.currentStepIndex;\n  }\n\n  /**\n   * Resets the state of this wizard.\n   * A reset transitions the wizard automatically to the first step and sets all steps as incomplete.\n   * In addition the whole wizard is set as incomplete\n   */\n  reset(): void {\n    // the wizard doesn't contain a step with the default step index\n    if (!this.wizardState.hasStep(this.wizardState.defaultStepIndex)) {\n      throw new Error(`The wizard doesn't contain a step with index ${this.wizardState.defaultStepIndex}`);\n    }\n\n    // at least one step is before the default step, that is not optional\n    const illegalDefaultStep = this.wizardState.wizardSteps\n      .filter((step, index) => index < this.wizardState.defaultStepIndex)\n      .some(step => !step.optional);\n\n    if (illegalDefaultStep) {\n      throw new Error(`The default step index ${this.wizardState.defaultStepIndex} is located after a non optional step`);\n    }\n\n    // reset the step internal state\n    this.wizardState.wizardSteps.forEach(step => {\n      step.completed = false;\n      step.selected = false;\n    });\n\n    // set the first step as the current step\n    this.wizardState.currentStepIndex = this.wizardState.defaultStepIndex;\n    this.wizardState.currentStep.selected = true;\n    this.wizardState.currentStep.enter(MovingDirection.Forwards);\n  }\n}\n","import {FreeNavigationMode} from './free-navigation-mode';\nimport {NavigationMode} from './navigation-mode.interface';\nimport {SemiStrictNavigationMode} from './semi-strict-navigation-mode';\nimport {StrictNavigationMode} from './strict-navigation-mode';\nimport {WizardState} from './wizard-state.model';\n\n/**\n * A factory method used to create [[NavigationMode]] instances\n *\n * @param navigationMode The name of the to be used navigation mode\n * @param wizardState The wizard state of the wizard\n * @returns The created [[NavigationMode]]\n */\nexport function navigationModeFactory(navigationMode: string, wizardState: WizardState): NavigationMode {\n  switch (navigationMode) {\n    case 'free':\n      return new FreeNavigationMode(wizardState);\n    case 'semi-strict':\n      return new SemiStrictNavigationMode(wizardState);\n    case 'strict':\n    default:\n      return new StrictNavigationMode(wizardState);\n  }\n}\n","import {Injectable} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardStep} from '../util/wizard-step.interface';\nimport {NavigationMode} from './navigation-mode.interface';\nimport {navigationModeFactory} from './navigation-mode.provider';\n\n/**\n * The internal model/state of a wizard.\n * This model contains:\n * - an array with all steps the wizard contains\n * - the index of the step the wizard currently resides inside\n * - information about the completeness of the wizard\n * - some additional helper methods\n *\n * @author Marc Arndt\n */\n@Injectable()\nexport class WizardState {\n  /**\n   * An array representation of all wizard steps belonging to this model\n   */\n  public wizardSteps: Array<WizardStep> = [];\n\n  /**\n   * The index of the currently visible and selected step inside the wizardSteps QueryList.\n   * If this wizard contains no steps, currentStepIndex is -1\n   */\n  public currentStepIndex = -1;\n\n  /**\n   * The navigation mode used to navigate inside the wizard\n   */\n  public navigationMode: NavigationMode;\n\n  /**\n   * True, if the navigation bar shouldn't be used for navigating\n   */\n  public disableNavigationBar: boolean;\n\n  /**\n   * Constructor\n   */\n  constructor() {\n  }\n\n  /**\n   * The initial step index, as taken from the [[WizardComponent]]\n   */\n  private _defaultStepIndex = 0;\n\n  /**\n   * The initial step index.\n   * This value can be either:\n   * - the index of a wizard step with a `selected` directive, or\n   * - the default step index, set in the [[WizardComponent]]\n   */\n  public get defaultStepIndex(): number {\n    const foundDefaultStep = this.wizardSteps.find(step => step.defaultSelected);\n\n    if (foundDefaultStep) {\n      return this.getIndexOfStep(foundDefaultStep);\n    } else {\n      return this._defaultStepIndex;\n    }\n  }\n\n  /**\n   * Sets the initial default step.\n   * Beware: This initial default is only used if no wizard step has been enhanced with the `selected` directive\n   *\n   * @param defaultStepIndex The new default wizard step index\n   */\n  public set defaultStepIndex(defaultStepIndex) {\n    this._defaultStepIndex = defaultStepIndex;\n  }\n\n  /**\n   * The WizardStep object belonging to the currently visible and selected step.\n   * The currentStep is always the currently selected wizard step.\n   * The currentStep can be either completed, if it was visited earlier,\n   * or not completed, if it is visited for the first time or its state is currently out of date.\n   *\n   * If this wizard contains no steps, currentStep is null\n   */\n  public get currentStep(): WizardStep {\n    if (this.hasStep(this.currentStepIndex)) {\n      return this.wizardSteps[this.currentStepIndex];\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * The completeness of the wizard.\n   * If the wizard has been completed, i.e. all steps are either completed or optional, this value is true, otherwise it is false\n   */\n  public get completed(): boolean {\n    return this.wizardSteps.every(step => step.completed || step.optional);\n  }\n\n  /**\n   * Updates the navigation mode to the navigation mode with the given name\n   *\n   * @param updatedNavigationMode The name of the new navigation mode\n   */\n  updateNavigationMode(updatedNavigationMode: string): void {\n    this.navigationMode = navigationModeFactory(updatedNavigationMode, this);\n  }\n\n  /**\n   * Updates the wizard steps to the new array\n   *\n   * @param updatedWizardSteps The updated wizard steps\n   */\n  updateWizardSteps(updatedWizardSteps: Array<WizardStep>): void {\n    // the wizard is currently not in the initialization phase\n    if (this.wizardSteps.length > 0 && this.currentStepIndex > -1) {\n      this.currentStepIndex = updatedWizardSteps.indexOf(this.wizardSteps[this.currentStepIndex]);\n    }\n\n    this.wizardSteps = updatedWizardSteps;\n  }\n\n  /**\n   * Checks if a given index `stepIndex` is inside the range of possible wizard steps inside this wizard\n   *\n   * @param stepIndex The to be checked index of a step inside this wizard\n   * @returns True if the given `stepIndex` is contained inside this wizard, false otherwise\n   */\n  hasStep(stepIndex: number): boolean {\n    return this.wizardSteps.length > 0 && 0 <= stepIndex && stepIndex < this.wizardSteps.length;\n  }\n\n  /**\n   * Checks if this wizard has a previous step, compared to the current step\n   *\n   * @returns True if this wizard has a previous step before the current step\n   */\n  hasPreviousStep(): boolean {\n    return this.hasStep(this.currentStepIndex - 1);\n  }\n\n  /**\n   * Checks if this wizard has a next step, compared to the current step\n   *\n   * @returns True if this wizard has a next step after the current step\n   */\n  hasNextStep(): boolean {\n    return this.hasStep(this.currentStepIndex + 1);\n  }\n\n  /**\n   * Checks if this wizard is currently inside its last step\n   *\n   * @returns True if the wizard is currently inside its last step\n   */\n  isLastStep(): boolean {\n    return this.wizardSteps.length > 0 && this.currentStepIndex === this.wizardSteps.length - 1;\n  }\n\n  /**\n   * Finds the [[WizardStep]] at the given index `stepIndex`.\n   * If no [[WizardStep]] exists at the given index an Error is thrown\n   *\n   * @param stepIndex The given index\n   * @returns The found [[WizardStep]] at the given index `stepIndex`\n   * @throws An `Error` is thrown, if the given index `stepIndex` doesn't exist\n   */\n  getStepAtIndex(stepIndex: number): WizardStep {\n    if (!this.hasStep(stepIndex)) {\n      throw new Error(`Expected a known step, but got stepIndex: ${stepIndex}.`);\n    }\n\n    return this.wizardSteps[stepIndex];\n  }\n\n  /**\n   * Finds the index of the step with the given `stepId`.\n   * If no step with the given `stepId` exists, `-1` is returned\n   *\n   * @param stepId The given step id\n   * @returns The found index of a step with the given step id, or `-1` if no step with the given id is included in the wizard\n   */\n  getIndexOfStepWithId(stepId: string): number {\n    return this.wizardSteps.findIndex(step => step.stepId === stepId);\n  }\n\n  /**\n   * Finds the index of the given [[WizardStep]] `step`.\n   * If the given [[WizardStep]] is not contained inside this wizard, `-1` is returned\n   *\n   * @param step The given [[WizardStep]]\n   * @returns The found index of `step` or `-1` if the step is not included in the wizard\n   */\n  getIndexOfStep(step: WizardStep): number {\n    return this.wizardSteps.indexOf(step);\n  }\n\n  /**\n   * Calculates the correct [[MovingDirection]] value for a given `destinationStep` compared to the `currentStepIndex`.\n   *\n   * @param destinationStep The given destination step\n   * @returns The calculated [[MovingDirection]]\n   */\n  getMovingDirection(destinationStep: number): MovingDirection {\n    let movingDirection: MovingDirection;\n\n    if (destinationStep > this.currentStepIndex) {\n      movingDirection = MovingDirection.Forwards;\n    } else if (destinationStep < this.currentStepIndex) {\n      movingDirection = MovingDirection.Backwards;\n    } else {\n      movingDirection = MovingDirection.Stay;\n    }\n\n    return movingDirection;\n  }\n}\n","import {Component, Input, ViewEncapsulation} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `aw-wizard-navigation-bar` component contains the navigation bar inside a [[WizardComponent]].\n * To correctly display the navigation bar, it's required to set the right css classes for the navigation bar,\n * otherwise it will look like a normal `ul` component.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-navigation-bar></aw-wizard-navigation-bar>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-navigation-bar',\n  templateUrl: 'wizard-navigation-bar.component.html',\n  styleUrls: ['wizard-navigation-bar.component.horizontal.less', 'wizard-navigation-bar.component.vertical.less'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class WizardNavigationBarComponent {\n  /**\n   * The direction in which the wizard steps should be shown in the navigation bar.\n   * This value can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public direction = 'left-to-right';\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state the wizard currently resides in\n   */\n  constructor(public wizardState: WizardState) {\n  }\n\n  /**\n   * The navigation mode\n   */\n  public get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Returns all [[WizardStep]]s contained in the wizard\n   *\n   * @returns An array containing all [[WizardStep]]s\n   */\n  get wizardSteps(): Array<WizardStep> {\n    switch (this.direction) {\n      case 'right-to-left':\n        return this.wizardState.wizardSteps.slice().reverse();\n      case 'left-to-right':\n      default:\n        return this.wizardState.wizardSteps;\n    }\n  }\n\n  /**\n   * Returns the number of wizard steps, that need to be displaced in the navigation bar\n   *\n   * @returns The number of wizard steps to be displayed\n   */\n  get numberOfWizardSteps(): number {\n    return this.wizardState.wizardSteps.length;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `current` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as current\n   */\n  public isCurrent(wizardStep: WizardStep): boolean {\n    return wizardStep.selected && !wizardStep.completed && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `done` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as done\n   */\n  public isDone(wizardStep: WizardStep): boolean {\n    return (wizardStep.completed && !wizardStep.selected) || this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `default` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as default\n   */\n  public isDefault(wizardStep: WizardStep): boolean {\n    return !wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `editing` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as editing\n   */\n  public isEditing(wizardStep: WizardStep): boolean {\n    return wizardStep.selected && wizardStep.completed && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `optional` in the navigation bar\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as optional\n   */\n  public isOptional(wizardStep: WizardStep): boolean {\n    return wizardStep.optional && !wizardStep.completed && !wizardStep.selected && !this.wizardState.completed;\n  }\n\n  /**\n   * Checks, whether a [[WizardStep]] can be marked as `navigable` in the navigation bar.\n   * A wizard step can be navigated to if:\n   * - the step is currently not selected\n   * - the navigation bar isn't disabled\n   * - the navigation mode allows navigation to the step\n   *\n   * @param wizardStep The wizard step to be checked\n   * @returns True if the step can be marked as navigable\n   */\n  public isNavigable(wizardStep: WizardStep): boolean {\n    return !wizardStep.selected && !this.wizardState.disableNavigationBar &&\n      this.navigationMode.isNavigable(this.wizardState.getIndexOfStep(wizardStep));\n  }\n}\n","import {Component, forwardRef, ViewEncapsulation} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `aw-wizard-step` component is used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </aw-wizard-step>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <aw-wizard-step>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard-step',\n  templateUrl: 'wizard-step.component.html',\n  styleUrls: ['wizard-step.component.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepComponent)}\n  ]\n})\nexport class WizardStepComponent extends WizardStep {\n}\n","import {\n  AfterContentInit,\n  Component,\n  ContentChildren,\n  HostBinding,\n  Input,\n  OnChanges,\n  QueryList,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `aw-wizard` component defines the root component of a wizard.\n * Through the setting of input parameters for the `aw-wizard` component it's possible to change the location and size\n * of its navigation bar.\n *\n * ### Syntax\n * ```html\n * <aw-wizard [navBarLocation]=\"location of navigation bar\" [navBarLayout]=\"layout of navigation bar\">\n *     ...\n * </aw-wizard>\n * ```\n *\n * ### Example\n *\n * Without completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n * </aw-wizard>\n * ```\n *\n * With completion step:\n *\n * ```html\n * <aw-wizard navBarLocation=\"top\" navBarLayout=\"small\">\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-step>...</aw-wizard-step>\n *     <aw-wizard-completion-step>...</aw-wizard-completion-step>\n * </aw-wizard>\n * ```\n *\n * @author Marc Arndt\n */\n@Component({\n  selector: 'aw-wizard',\n  templateUrl: 'wizard.component.html',\n  styleUrls: ['wizard.component.less'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [WizardState]\n})\nexport class WizardComponent implements OnChanges, AfterContentInit {\n  /**\n   * A QueryList containing all [[WizardStep]]s inside this wizard\n   */\n  @ContentChildren(WizardStep)\n  public wizardSteps: QueryList<WizardStep>;\n\n  /**\n   * The location of the navigation bar inside the wizard.\n   * This location can be either top, bottom, left or right\n   */\n  @Input()\n  public navBarLocation = 'top';\n\n  /**\n   * The layout of the navigation bar inside the wizard.\n   * The layout can be either small, large-filled, large-empty or large-symbols\n   */\n  @Input()\n  public navBarLayout = 'small';\n\n  /**\n   * The direction in which the steps inside the navigation bar should be shown.\n   * The direction can be either `left-to-right` or `right-to-left`\n   */\n  @Input()\n  public navBarDirection = 'left-to-right';\n\n  /**\n   * The navigation mode used for transitioning between different steps.\n   * The navigation mode can be either `strict`, `semi-strict` or `free`\n   */\n  @Input()\n  public navigationMode = 'strict';\n\n  /**\n   * The initially selected step, represented by its index\n   */\n  @Input()\n  public defaultStepIndex = 0;\n\n  /**\n   * True, if the navigation bar shouldn't be used for navigating\n   */\n  @Input()\n  public disableNavigationBar = false;\n\n  /**\n   * Constructor\n   *\n   * @param model The model for this wizard component\n   */\n  constructor(public model: WizardState) {\n  }\n\n  /**\n   * Returns true if this wizard uses a horizontal orientation.\n   * The wizard uses a horizontal orientation, iff the navigation bar is shown at the top or bottom of this wizard\n   *\n   * @returns True if this wizard uses a horizontal orientation\n   */\n  @HostBinding('class.horizontal')\n  public get horizontalOrientation(): boolean {\n    return this.navBarLocation === 'top' || this.navBarLocation === 'bottom';\n  }\n\n  /**\n   * Returns true if this wizard uses a vertical orientation.\n   * The wizard uses a vertical orientation, iff the navigation bar is shown at the left or right of this wizard\n   *\n   * @returns True if this wizard uses a vertical orientation\n   */\n  @HostBinding('class.vertical')\n  public get verticalOrientation(): boolean {\n    return this.navBarLocation === 'left' || this.navBarLocation === 'right';\n  }\n\n  /**\n   * The navigation mode for this wizard\n   */\n  public get navigation(): NavigationMode {\n    return this.model.navigationMode;\n  }\n\n  /**\n   * Updates the model after certain input values have changed\n   *\n   * @param changes The detected changes\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    for (const propName of Object.keys(changes)) {\n      const change = changes[propName];\n\n      if (!change.firstChange) {\n        switch (propName) {\n          case 'defaultStepIndex':\n            this.model.defaultStepIndex = parseInt(change.currentValue, 10);\n            break;\n          case 'disableNavigationBar':\n            this.model.disableNavigationBar = change.currentValue;\n            break;\n          case 'navigationMode':\n            this.model.updateNavigationMode(change.currentValue);\n            break;\n          /* istanbul ignore next */\n          default:\n        }\n      }\n    }\n  }\n\n  /**\n   * Initialization work\n   */\n  ngAfterContentInit(): void {\n    // add a subscriber to the wizard steps QueryList to listen to changes in the DOM\n    this.wizardSteps.changes.subscribe(changedWizardSteps => {\n      this.model.updateWizardSteps(changedWizardSteps.toArray());\n    });\n\n    // initialize the model\n    this.model.disableNavigationBar = this.disableNavigationBar;\n    this.model.defaultStepIndex = this.defaultStepIndex;\n    this.model.updateWizardSteps(this.wizardSteps.toArray());\n    this.model.updateNavigationMode(this.navigationMode);\n\n    // finally reset the whole wizard state\n    this.navigation.reset();\n  }\n}\n","import {Directive, EventEmitter, Host, OnInit, Output} from '@angular/core';\nimport {MovingDirection} from '../util/moving-direction.enum';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\n\n/**\n * The `awEnableBackLinks` directive can be used to allow the user to leave a [[WizardCompletionStep]] after is has been entered.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-completion-step awEnableBackLinks (stepExit)=\"exit function\">\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-completion-step stepTitle=\"Final step\" awEnableBackLinks>\n *     ...\n * </aw-wizard-completion-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awEnableBackLinks]'\n})\nexport class EnableBackLinksDirective implements OnInit {\n  /**\n   * This EventEmitter is called when the step is exited.\n   * The bound method can be used to do cleanup work.\n   */\n  @Output()\n  public stepExit = new EventEmitter<MovingDirection>();\n\n  /**\n   * Constructor\n   *\n   * @param completionStep The wizard completion step, which should be exitable\n   */\n  constructor(@Host() private completionStep: WizardCompletionStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.completionStep.canExit = true;\n    this.completionStep.stepExit = this.stepExit;\n  }\n}\n","import {WizardStep} from './wizard-step.interface';\n\n/**\n * An unique identifier of a wizard step\n *\n * @author Marc Arndt\n */\nexport interface StepId {\n  /**\n   * The id of the destination step\n   */\n  stepId: string;\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepId]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepId]] and false otherwise\n */\nexport function isStepId(value: any): value is StepId {\n  return value.hasOwnProperty('stepId') && !(value instanceof WizardStep);\n}\n","/**\n * An index of a wizard step.\n * This index is the index of the step inside the wizard.\n * The index is always zero based, i.e. the step with index 0 is the first step of the wizard\n *\n * @author Marc Arndt\n */\nexport interface StepIndex {\n  /**\n   * The index of the destination step\n   */\n  stepIndex: number;\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepIndex]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepIndex]] and false otherwise\n */\nexport function isStepIndex(value: any): value is StepIndex {\n  return value.hasOwnProperty('stepIndex');\n}\n","/**\n * An offset between two steps.\n * This offset can be either positive or negative.\n * A positive offset means, that the offset step is after the other step, while a negative offset means,\n * that the offset step is ahead of the other step.\n *\n * @author Marc Arndt\n */\nexport interface StepOffset {\n  /**\n   * The offset to the destination step\n   */\n  stepOffset: number;\n}\n\n/**\n * Checks whether the given `value` implements the interface [[StepOffset]].\n *\n * @param value The value to be checked\n * @returns True if the given value implements [[StepOffset]] and false otherwise\n */\nexport function isStepOffset(value: any): value is StepOffset {\n  return value.hasOwnProperty('stepOffset');\n}\n","import {Directive, EventEmitter, HostListener, Input, Optional, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\nimport {isStepId, StepId} from '../util/step-id.interface';\nimport {isStepIndex, StepIndex} from '../util/step-index.interface';\nimport {isStepOffset, StepOffset} from '../util/step-offset.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awGoToStep` directive can be used to navigate to a given step.\n * This step can be defined in one of multiple formats\n *\n * ### Syntax\n *\n * With absolute step index:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepIndex: absolute step index }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With unique step id:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepId: 'step id of destination step' }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With a wizard step object:\n *\n * ```html\n * <button [awGoToStep]=\"wizard step object\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * With an offset to the defining step:\n *\n * ```html\n * <button [awGoToStep]=\"{ stepOffset: offset }\" (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awGoToStep]'\n})\nexport class GoToStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n  /**\n   * The destination step, to which the wizard should navigate, after the component, having this directive has been activated.\n   * This destination step can be given either as a [[WizardStep]] containing the step directly,\n   * a [[StepOffset]] between the current step and the `wizardStep`, in which this directive has been used,\n   * or a step index as a number or string\n   */\n    // tslint:disable-next-line:no-input-rename\n  @Input('awGoToStep')\n  public targetStep: WizardStep | StepOffset | StepIndex | StepId;\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The wizard state\n   * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]\n   */\n  constructor(private wizardState: WizardState, @Optional() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * Returns the destination step of this directive as an absolute step index inside the wizard\n   *\n   * @returns The index of the destination step\n   * @throws If `targetStep` is of an unknown type an `Error` is thrown\n   */\n  public get destinationStep(): number {\n    let destinationStep: number;\n\n    if (isStepIndex(this.targetStep)) {\n      destinationStep = this.targetStep.stepIndex;\n    } else if (isStepId(this.targetStep)) {\n      destinationStep = this.wizardState.getIndexOfStepWithId(this.targetStep.stepId);\n    } else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {\n      destinationStep = this.wizardState.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;\n    } else if (this.targetStep instanceof WizardStep) {\n      destinationStep = this.wizardState.getIndexOfStep(this.targetStep);\n    } else {\n      throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);\n    }\n\n    return destinationStep;\n  }\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the `destinationStep`\n   */\n  @HostListener('click', ['$event'])\n  public onClick(event: Event): void {\n    this.navigationMode.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\n\n/**\n * The `awNextStep` directive can be used to navigate to the next step.\n *\n * ### Syntax\n *\n * ```html\n * <button awNextStep (finalize)=\"finalize method\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awNextStep]'\n})\nexport class NextStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard\n   */\n  constructor(private wizardState: WizardState) {\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * A convenience name for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the next step\n   */\n  @HostListener('click', ['$event'])\n  public onClick(event: Event): void {\n    this.navigationMode.goToNextStep(this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, Host, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awOptionalStep` directive can be used to define an optional `wizard-step`.\n * An optional wizard step is a [[WizardStep]] that doesn't need to be completed to transition to later wizard steps.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * ### Example\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Second step\" awOptionalStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awOptionalStep]'\n})\nexport class OptionalStepDirective implements OnInit {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which contains this [[OptionalStepDirective]]\n   */\n  constructor(@Host() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.wizardStep.optional = true;\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\n\n/**\n * The `awPreviousStep` directive can be used to navigate to the previous step.\n * Compared to the [[NextStepDirective]] it's important to note, that this directive doesn't contain a `finalize` output method.\n *\n * ### Syntax\n *\n * ```html\n * <button awPreviousStep>...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awPreviousStep]'\n})\nexport class PreviousStepDirective {\n  /**\n   * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public preFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.\n   */\n  @Output()\n  public postFinalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The state of the wizard\n   */\n  constructor(private wizardState: WizardState) {\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   */\n  public get finalize(): EventEmitter<void> {\n    return this.preFinalize;\n  }\n\n  /**\n   * A convenience field for `preFinalize`\n   *\n   * @param emitter The [[EventEmitter]] to be set\n   */\n  @Output()\n  public set finalize(emitter: EventEmitter<void>) {\n    /* istanbul ignore next */\n    this.preFinalize = emitter;\n  }\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Listener method for `click` events on the component with this directive.\n   * After this method is called the wizard will try to transition to the previous step\n   */\n  @HostListener('click', ['$event'])\n  public onClick(event: Event): void {\n    this.navigationMode.goToPreviousStep(this.preFinalize, this.postFinalize);\n  }\n}\n","import {Directive, EventEmitter, HostListener, Output} from '@angular/core';\nimport {NavigationMode} from '../navigation/navigation-mode.interface';\nimport {WizardState} from '../navigation/wizard-state.model';\n\n/**\n * The `awResetWizard` directive can be used to reset the wizard to its initial state.\n * This directive accepts an output, which can be used to specify some custom cleanup work during the reset process.\n *\n * ### Syntax\n *\n * ```html\n * <button awResetWizard (finalize)=\"custom reset task\">...</button>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awResetWizard]'\n})\nexport class ResetWizardDirective {\n  /**\n   * An [[EventEmitter]] containing some tasks to be done, directly before the wizard is being reset\n   */\n  @Output()\n  public finalize: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Constructor\n   *\n   * @param wizardState The wizard state\n   */\n  constructor(private wizardState: WizardState) {\n  }\n\n  /**\n   * The navigation mode\n   */\n  private get navigationMode(): NavigationMode {\n    return this.wizardState.navigationMode;\n  }\n\n  /**\n   * Resets the wizard\n   */\n  @HostListener('click', ['$event'])\n  public onClick(event: Event): void {\n    // do some optional cleanup work\n    this.finalize.emit();\n    // reset the wizard to its initial state\n    this.navigationMode.reset();\n  }\n}\n","import {Directive, Host, OnInit} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awSelectedStep` directive can be used on a [[WizardStep]] to set it as selected after the wizard initialisation or a reset.\n *\n * ### Syntax\n *\n * ```html\n * <aw-wizard-step stepTitle=\"Step title\" awSelectedStep>\n *     ...\n * </aw-wizard-step>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awSelectedStep]'\n})\nexport class SelectedStepDirective implements OnInit {\n  /**\n   * Constructor\n   *\n   * @param wizardStep The wizard step, which should be selected by default\n   */\n  constructor(@Host() private wizardStep: WizardStep) {\n  }\n\n  /**\n   * Initialization work\n   */\n  ngOnInit(): void {\n    this.wizardStep.defaultSelected = true;\n  }\n}\n","import {Directive, forwardRef} from '@angular/core';\nimport {WizardCompletionStep} from '../util/wizard-completion-step.interface';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awWizardCompletionStep` directive can be used to define a completion/success step at the end of your wizard\n * After a [[WizardCompletionStep]] has been entered, it has the characteristic that the user is blocked from\n * leaving it again to a previous step.\n * In addition entering a [[WizardCompletionStep]] automatically sets the `wizard`, and all steps inside the `wizard`,\n * as completed.\n *\n * ### Syntax\n *\n * ```html\n * <div awWizardCompletionStep [stepTitle]=\"title of the wizard step\"\n *    [navigationSymbol]=\"{ symbol: 'navigation symbol', fontFamily: 'font-family' }\"\n *    (stepEnter)=\"event emitter to be called when the wizard step is entered\"\n *    (stepExit)=\"event emitter to be called when the wizard step is exited\">\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '1' }\">\n *    ...\n * </div>\n * ```\n *\n * With a navigation symbol from the `font-awesome` font:\n *\n * ```html\n * <div awWizardCompletionStep stepTitle=\"Step 1\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardCompletionStep]',\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardCompletionStepDirective)},\n    {provide: WizardCompletionStep, useExisting: forwardRef(() => WizardCompletionStepDirective)}\n  ]\n})\nexport class WizardCompletionStepDirective extends WizardCompletionStep {\n}\n","import {Directive, forwardRef} from '@angular/core';\nimport {WizardStep} from '../util/wizard-step.interface';\n\n/**\n * The `awWizardStep` directive can be used to define a normal step inside a wizard.\n *\n * ### Syntax\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep [stepTitle]=\"step title\" [navigationSymbol]=\"{ symbol: 'symbol', fontFamily: 'font-family' }\"\n *    [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep [canExit]=\"deciding function\" (stepEnter)=\"enter function\" (stepExit)=\"exit function\">\n *    <ng-template awWizardStepTitle>\n *        step title\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        symbol\n *    </ng-template>\n *    ...\n * </div>\n * ```\n *\n * ### Example\n *\n * With `stepTitle` and `navigationSymbol` inputs:\n *\n * ```html\n * <div awWizardStep stepTitle=\"Address information\" [navigationSymbol]=\"{ symbol: '&#xf1ba;', fontFamily: 'FontAwesome' }\">\n *    ...\n * </div>\n * ```\n *\n * With `awWizardStepTitle` and `awWizardStepSymbol` directives:\n *\n * ```html\n * <div awWizardStep>\n *    <ng-template awWizardStepTitle>\n *        Address information\n *    </ng-template>\n *    <ng-template awWizardStepSymbol>\n *        <i class=\"fa fa-taxi\"></i>\n *    </ng-template>\n * </div>\n * ```\n *\n * @author Marc Arndt\n */\n@Directive({\n  selector: '[awWizardStep]',\n  providers: [\n    {provide: WizardStep, useExisting: forwardRef(() => WizardStepDirective)}\n  ]\n})\nexport class WizardStepDirective extends WizardStep {\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {WizardCompletionStepComponent} from './components/wizard-completion-step.component';\nimport {WizardNavigationBarComponent} from './components/wizard-navigation-bar.component';\nimport {WizardStepComponent} from './components/wizard-step.component';\nimport {WizardComponent} from './components/wizard.component';\nimport {EnableBackLinksDirective} from './directives/enable-back-links.directive';\nimport {GoToStepDirective} from './directives/go-to-step.directive';\nimport {NextStepDirective} from './directives/next-step.directive';\nimport {OptionalStepDirective} from './directives/optional-step.directive';\nimport {PreviousStepDirective} from './directives/previous-step.directive';\nimport {ResetWizardDirective} from './directives/reset-wizard.directive';\nimport {SelectedStepDirective} from './directives/selected-step.directive';\nimport {WizardCompletionStepDirective} from './directives/wizard-completion-step.directive';\nimport {WizardStepSymbolDirective} from './directives/wizard-step-symbol.directive';\nimport {WizardStepTitleDirective} from './directives/wizard-step-title.directive';\nimport {WizardStepDirective} from './directives/wizard-step.directive';\n\n/**\n * The module defining all the content inside `angular-archwizard`\n *\n * @author Marc Arndt\n */\n@NgModule({\n  declarations: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepSymbolDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [\n    WizardComponent,\n    WizardStepComponent,\n    WizardNavigationBarComponent,\n    WizardCompletionStepComponent,\n    GoToStepDirective,\n    NextStepDirective,\n    PreviousStepDirective,\n    OptionalStepDirective,\n    WizardStepSymbolDirective,\n    WizardStepTitleDirective,\n    EnableBackLinksDirective,\n    WizardStepDirective,\n    WizardCompletionStepDirective,\n    SelectedStepDirective,\n    ResetWizardDirective\n  ]\n})\nexport class ArchwizardModule {\n  /* istanbul ignore next */\n  static forRoot(): ModuleWithProviders {\n    return {ngModule: ArchwizardModule, providers: []};\n  }\n}\n"]}