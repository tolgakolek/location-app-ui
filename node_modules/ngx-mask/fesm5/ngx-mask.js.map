{"version":3,"file":"ngx-mask.js","sources":["ng://ngx-mask/app/ngx-mask/config.ts","ng://ngx-mask/app/ngx-mask/mask-applier.service.ts","ng://ngx-mask/app/ngx-mask/mask.service.ts","ng://ngx-mask/app/ngx-mask/mask.directive.ts","ng://ngx-mask/app/ngx-mask/mask.pipe.ts","ng://ngx-mask/app/ngx-mask/ngx-mask.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport interface IConfig {\n    suffix: string;\n    prefix: string;\n    clearIfNotMatch: boolean;\n    showTemplate: boolean;\n    showMaskTyped: boolean;\n    shownMaskExpression: string;\n    dropSpecialCharacters: boolean | string[];\n    specialCharacters: string[];\n    hiddenInput: boolean | undefined;\n    validation: boolean;\n    patterns: {\n        [character: string]: {\n            pattern: RegExp;\n            optional?: boolean;\n            symbol?: string;\n        };\n    };\n}\n\nexport type optionsConfig = Partial<IConfig>;\nexport const config: InjectionToken<IConfig> = new InjectionToken('config');\nexport const NEW_CONFIG: InjectionToken<IConfig> = new InjectionToken('NEW_CONFIG');\nexport const INITIAL_CONFIG: InjectionToken<IConfig> = new InjectionToken('INITIAL_CONFIG');\n\nexport const initialConfig: IConfig = {\n    suffix: '',\n    prefix: '',\n    clearIfNotMatch: false,\n    showTemplate: false,\n    showMaskTyped: false,\n    dropSpecialCharacters: true,\n    hiddenInput: undefined,\n    shownMaskExpression: '',\n    validation: true,\n    // tslint:disable-next-line: quotemark\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\n\nexport const withoutValidation: string[] = [\n    'percent',\n    'Hh:m0:s0',\n    'Hh:m0',\n    'Hh',\n    'm0:s0',\n    's0',\n    'm0',\n    'separator',\n    'dot_separator',\n    'comma_separator',\n    'd0/M0/0000',\n    'd0/M0',\n    'd0',\n    'M0',\n];\n","import { Inject, Injectable } from '@angular/core';\nimport { config, IConfig } from './config';\n\nexport enum Separators {\n    SEPARATOR = 'separator',\n    COMMA_SEPARATOR = 'comma_separator',\n    DOT_SEPARATOR = 'dot_separator',\n}\n\n@Injectable()\nexport class MaskApplierService {\n    public dropSpecialCharacters: IConfig['dropSpecialCharacters'];\n    public hiddenInput: IConfig['hiddenInput'];\n    public showTemplate!: IConfig['showTemplate'];\n    public clearIfNotMatch!: IConfig['clearIfNotMatch'];\n    public maskExpression: string = '';\n    public actualValue: string = '';\n    public shownMaskExpression: string = '';\n    public maskSpecialCharacters!: IConfig['specialCharacters'];\n    public maskAvailablePatterns!: IConfig['patterns'];\n    public prefix!: IConfig['prefix'];\n    public suffix!: IConfig['suffix'];\n    public customPattern!: IConfig['patterns'];\n    public ipError?: boolean;\n    public showMaskTyped!: IConfig['showMaskTyped'];\n    public validation: IConfig['validation'];\n\n    private _shift!: Set<number>;\n\n    public constructor(@Inject(config) protected _config: IConfig) {\n        this._shift = new Set();\n        this.clearIfNotMatch = this._config.clearIfNotMatch;\n        this.dropSpecialCharacters = this._config.dropSpecialCharacters;\n        this.maskSpecialCharacters = this._config!.specialCharacters;\n        this.maskAvailablePatterns = this._config.patterns;\n        this.prefix = this._config.prefix;\n        this.suffix = this._config.suffix;\n        this.hiddenInput = this._config.hiddenInput;\n        this.showMaskTyped = this._config.showMaskTyped;\n        this.validation = this._config.validation;\n    }\n    // tslint:disable-next-line:no-any\n    public applyMaskWithPattern(inputValue: string, maskAndPattern: [string, IConfig['patterns']]): string {\n        const [mask, customPattern] = maskAndPattern;\n        this.customPattern = customPattern;\n        return this.applyMask(inputValue, mask);\n    }\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n    ): string {\n        if (inputValue === undefined || inputValue === null || maskExpression === undefined) {\n            return '';\n        }\n        let cursor: number = 0;\n        let result: string = ``;\n        let multi: boolean = false;\n        let backspaceShift: boolean = false;\n        let shift: number = 1;\n        if (inputValue.slice(0, this.prefix.length) === this.prefix) {\n            inputValue = inputValue.slice(this.prefix.length, inputValue.length);\n        }\n        const inputArray: string[] = inputValue.toString().split('');\n        if (maskExpression === 'IP') {\n            this.ipError = !!(inputArray.filter((i: string) => i === '.').length < 3 && inputArray.length < 7);\n            maskExpression = '099.099.099.099';\n        }\n        if (maskExpression.startsWith('percent')) {\n            if (inputValue.match('[a-z]|[A-Z]') || inputValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/]/)) {\n                inputValue = this._checkInput(inputValue);\n                const precision: number = this.getPrecision(maskExpression);\n                inputValue = this.checkInputPrecision(inputValue, precision, '.');\n            }\n            if (this.percentage(inputValue)) {\n                result = inputValue;\n            } else {\n                result = inputValue.substring(0, inputValue.length - 1);\n            }\n        } else if (\n            maskExpression.startsWith(Separators.SEPARATOR) ||\n            maskExpression.startsWith(Separators.DOT_SEPARATOR) ||\n            maskExpression.startsWith(Separators.COMMA_SEPARATOR)\n        ) {\n            if (\n                inputValue.match('[wÐ°-ÑÐ-Ð¯]') ||\n                inputValue.match('[ÐÑÐ-Ñ]') ||\n                inputValue.match('[a-z]|[A-Z]') ||\n                inputValue.match(/[-@#!$%\\\\^&*()_Â£Â¬'+|~=`{}\\[\\]:\";<>.?\\/]/)\n            ) {\n                inputValue = this._checkInput(inputValue);\n            }\n            const precision: number = this.getPrecision(maskExpression);\n            let strForSep: string;\n            if (maskExpression.startsWith(Separators.SEPARATOR)) {\n                if (\n                    inputValue.includes(',') &&\n                    inputValue.endsWith(',') &&\n                    inputValue.indexOf(',') !== inputValue.lastIndexOf(',')\n                ) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                inputValue = inputValue.replace('.', ' ');\n            }\n            if (maskExpression.startsWith(Separators.DOT_SEPARATOR)) {\n                if (\n                    inputValue.indexOf('.') !== -1 &&\n                    inputValue.indexOf('.') === inputValue.lastIndexOf('.') &&\n                    (inputValue.indexOf('.') > 3 || inputValue.length < 6)\n                ) {\n                    inputValue = inputValue.replace('.', ',');\n                }\n                inputValue =\n                    inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== ','\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            if (maskExpression.startsWith(Separators.COMMA_SEPARATOR)) {\n                inputValue =\n                    inputValue.length > 1 && inputValue[0] === '0' && inputValue[1] !== '.'\n                        ? inputValue.slice(1, inputValue.length)\n                        : inputValue;\n            }\n            if (maskExpression.startsWith(Separators.SEPARATOR)) {\n                if (inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:.\";<>?\\/]/)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                inputValue = this.checkInputPrecision(inputValue, precision, ',');\n                strForSep = inputValue.replace(/\\s/g, '');\n                result = this.separator(strForSep, ' ', ',', precision);\n            } else if (maskExpression.startsWith(Separators.DOT_SEPARATOR)) {\n                if (inputValue.match(/[@#!$%^&*()_+|~=`{}\\[\\]:\\s\";<>?\\/]/)) {\n                    inputValue = inputValue.substring(0, inputValue.length - 1);\n                }\n                inputValue = this.checkInputPrecision(inputValue, precision, ',');\n                strForSep = inputValue.replace(/\\./g, '');\n                result = this.separator(strForSep, '.', ',', precision);\n            } else if (maskExpression.startsWith(Separators.COMMA_SEPARATOR)) {\n                strForSep = inputValue.replace(/,/g, '');\n                result = this.separator(strForSep, ',', '.', precision);\n            }\n\n            const commaShift: number = result.indexOf(',') - inputValue.indexOf(',');\n            const shiftStep: number = result.length - inputValue.length;\n\n            if (shiftStep > 0 && result[position] !== ',') {\n                backspaceShift = true;\n                let _shift: number = 0;\n                do {\n                    this._shift.add(position + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            } else if (\n                (commaShift !== 0 && position > 0 && !(result.indexOf(',') >= position && position > 3)) ||\n                (!(result.indexOf('.') >= position && position > 3) && shiftStep <= 0)\n            ) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                position += shiftStep;\n                this._shift.add(position);\n            } else {\n                this._shift.clear();\n            }\n        } else {\n            for (\n                // tslint:disable-next-line\n                let i: number = 0, inputSymbol: string = inputArray[0];\n                i < inputArray.length;\n                i++, inputSymbol = inputArray[i]\n            ) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor]) && maskExpression[cursor + 1] === '?') {\n                    result += inputSymbol;\n                    cursor += 2;\n                } else if (\n                    maskExpression[cursor + 1] === '*' &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n                ) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                } else if (\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor]) &&\n                    maskExpression[cursor + 1] === '*'\n                ) {\n                    result += inputSymbol;\n                    multi = true;\n                } else if (\n                    maskExpression[cursor + 1] === '?' &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2])\n                ) {\n                    result += inputSymbol;\n                    cursor += 3;\n                } else if (\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor]) ||\n                    (this.hiddenInput &&\n                        this.maskAvailablePatterns[maskExpression[cursor]] &&\n                        this.maskAvailablePatterns[maskExpression[cursor]].symbol === inputSymbol)\n                ) {\n                    if (maskExpression[cursor] === 'H') {\n                        if (Number(inputSymbol) > 2) {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'h') {\n                        if (result === '2' && Number(inputSymbol) > 3) {\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'm') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 's') {\n                        if (Number(inputSymbol) > 5) {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'd') {\n                        if (Number(inputSymbol) > 3) {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'd') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 31) {\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === 'M') {\n                        if (Number(inputSymbol) > 1) {\n                            cursor += 1;\n                            const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                                ? inputArray.length\n                                : cursor;\n                            this._shift.add(shiftStep + this.prefix.length || 0);\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor - 1] === 'M') {\n                        if (Number(inputValue.slice(cursor - 1, cursor + 1)) > 12) {\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                } else if (this.maskSpecialCharacters.indexOf(maskExpression[cursor]) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    const shiftStep: number = /[*?]/g.test(maskExpression.slice(0, cursor))\n                        ? inputArray.length\n                        : cursor;\n                    this._shift.add(shiftStep + this.prefix.length || 0);\n                    i--;\n                } else if (\n                    this.maskSpecialCharacters.indexOf(inputSymbol) > -1 &&\n                    this.maskAvailablePatterns[maskExpression[cursor]] &&\n                    this.maskAvailablePatterns[maskExpression[cursor]].optional\n                ) {\n                    cursor++;\n                    i--;\n                } else if (\n                    this.maskExpression[cursor + 1] === '*' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi\n                ) {\n                    cursor += 3;\n                    result += inputSymbol;\n                } else if (\n                    this.maskExpression[cursor + 1] === '?' &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2]) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi\n                ) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n            }\n        }\n        if (\n            result.length + 1 === maskExpression.length &&\n            this.maskSpecialCharacters.indexOf(maskExpression[maskExpression.length - 1]) !== -1\n        ) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n\n        let newPosition: number = position + 1;\n\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n\n        cb(this._shift.has(position) ? shift : 0, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let res: string = this.suffix ? `${this.prefix}${result}${this.suffix}` : `${this.prefix}${result}`;\n        if (result.length === 0) {\n            res = `${this.prefix}${result}`;\n        }\n        return res;\n    }\n    public _findSpecialChar(inputSymbol: string): undefined | string {\n        return this.maskSpecialCharacters.find((val: string) => val === inputSymbol);\n    }\n\n    protected _checkSymbolMask(inputSymbol: string, maskSymbol: string): boolean {\n        this.maskAvailablePatterns = this.customPattern ? this.customPattern : this.maskAvailablePatterns;\n        return (\n            this.maskAvailablePatterns[maskSymbol] &&\n            this.maskAvailablePatterns[maskSymbol].pattern &&\n            this.maskAvailablePatterns[maskSymbol].pattern.test(inputSymbol)\n        );\n    }\n\n    private separator = (str: string, char: string, decimalChar: string, precision: number) => {\n        str += '';\n        const x: string[] = str.split(decimalChar);\n        const decimals: string = x.length > 1 ? `${decimalChar}${x[1]}` : '';\n        let res: string = x[0];\n        const rgx: RegExp = /(\\d+)(\\d{3})/;\n        while (rgx.test(res)) {\n            res = res.replace(rgx, '$1' + char + '$2');\n        }\n        if (precision === undefined) {\n            return res + decimals;\n        } else if (precision === 0) {\n            return res;\n        }\n        return res + decimals.substr(0, precision + 1);\n    };\n\n    private percentage = (str: string): boolean => {\n        return Number(str) >= 0 && Number(str) <= 100;\n    };\n\n    private getPrecision = (maskExpression: string): number => {\n        const x: string[] = maskExpression.split('.');\n        if (x.length > 1) {\n            return Number(x[x.length - 1]);\n        }\n        return Infinity;\n    };\n\n    private checkInputPrecision = (inputValue: string, precision: number, decimalMarker: string): string => {\n        if (precision < Infinity) {\n            let precisionRegEx: RegExp;\n\n            if (decimalMarker === '.') {\n                precisionRegEx = new RegExp(`\\\\.\\\\d{${precision}}.*$`);\n            } else {\n                precisionRegEx = new RegExp(`,\\\\d{${precision}}.*$`);\n            }\n\n            const precisionMatch: RegExpMatchArray | null = inputValue.match(precisionRegEx);\n            if (precisionMatch && precisionMatch[0].length - 1 > precision) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            } else if (precision === 0 && inputValue.endsWith(decimalMarker)) {\n                inputValue = inputValue.substring(0, inputValue.length - 1);\n            }\n        }\n        return inputValue;\n    };\n\n    private _checkInput(str: string): string {\n        return str\n            .split('')\n            .filter((i: string) => i.match('\\\\d') || i === '.' || i === ',')\n            .join('');\n    }\n    // tslint:disable-next-line: max-file-line-count\n}\n","import { ElementRef, Inject, Injectable, Renderer2 } from '@angular/core';\nimport { config, IConfig } from './config';\nimport { DOCUMENT } from '@angular/common';\nimport { MaskApplierService, Separators } from './mask-applier.service';\n\n@Injectable()\nexport class MaskService extends MaskApplierService {\n    public validation: boolean = true;\n    public maskExpression: string = '';\n    public isNumberValue: boolean = false;\n    public showMaskTyped: boolean = false;\n    public maskIsShown: string = '';\n    public selStart: number | null = null;\n    public selEnd: number | null = null;\n    protected _formElement: HTMLInputElement;\n    // tslint:disable-next-line\n    public onChange = (_: any) => {};\n\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        @Inject(config) protected _config: IConfig,\n        private _elementRef: ElementRef,\n        private _renderer: Renderer2\n    ) {\n        super(_config);\n        this._formElement = this._elementRef.nativeElement;\n    }\n\n    // tslint:disable-next-line:cyclomatic-complexity\n    public applyMask(\n        inputValue: string,\n        maskExpression: string,\n        position: number = 0,\n        cb: Function = () => {}\n    ): string {\n        if (!maskExpression) {\n            return inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped ? this.showMaskInInput() : '';\n        if (this.maskExpression === 'IP' && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || '#');\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return this.prefix + this.maskIsShown;\n        }\n        const getSymbol: string = !!inputValue && typeof this.selStart === 'number' ? inputValue[this.selStart] : '';\n        let newInputValue: string = '';\n        if (this.hiddenInput !== undefined) {\n            let actualResult: string[] = this.actualValue.split('');\n            inputValue !== '' && actualResult.length\n                ? typeof this.selStart === 'number' && typeof this.selEnd === 'number'\n                    ? inputValue.length > actualResult.length\n                        ? actualResult.splice(this.selStart, 0, getSymbol)\n                        : inputValue.length < actualResult.length\n                        ? actualResult.length - inputValue.length === 1\n                            ? actualResult.splice(this.selStart - 1, 1)\n                            : actualResult.splice(this.selStart, this.selEnd - this.selStart)\n                        : null\n                    : null\n                : (actualResult = []);\n            newInputValue = this.actualValue.length ? this.shiftTypedSymbols(actualResult.join('')) : inputValue;\n        }\n        newInputValue = Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        const result: string = super.applyMask(newInputValue, maskExpression, position, cb);\n        this.actualValue = this.getActualValue(result);\n\n        if (\n            (this.maskExpression.startsWith(Separators.SEPARATOR) ||\n                this.maskExpression.startsWith(Separators.DOT_SEPARATOR)) &&\n            this.dropSpecialCharacters === true\n        ) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== ',');\n        }\n        if (this.maskExpression.startsWith(Separators.COMMA_SEPARATOR) && this.dropSpecialCharacters === true) {\n            this.maskSpecialCharacters = this.maskSpecialCharacters.filter((item: string) => item !== '.');\n        }\n\n        this.formControlResult(result);\n\n        if (!this.showMaskTyped) {\n            if (this.hiddenInput) {\n                return result && result.length ? this.hideInput(result, this.maskExpression) : result;\n            }\n            return result;\n        }\n        const resLen: number = result.length;\n        const prefNmask: string = this.prefix + this.maskIsShown;\n        return result + (this.maskExpression === 'IP' ? prefNmask : prefNmask.slice(resLen));\n    }\n\n    public applyValueChanges(position: number = 0, cb: Function = () => {}): void {\n        this._formElement.value = this.applyMask(this._formElement.value, this.maskExpression, position, cb);\n        if (this._formElement === this.document.activeElement) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n\n    public hideInput(inputValue: string, maskExpression: string): string {\n        return inputValue\n            .split('')\n            .map((curr: string, index: number) => {\n                if (\n                    this.maskAvailablePatterns &&\n                    this.maskAvailablePatterns[maskExpression[index]] &&\n                    this.maskAvailablePatterns[maskExpression[index]].symbol\n                ) {\n                    return this.maskAvailablePatterns[maskExpression[index]].symbol;\n                }\n                return curr;\n            })\n            .join('');\n    }\n\n    // this function is not necessary, it checks result against maskExpression\n    public getActualValue(res: string): string {\n        const compare: string[] = res\n            .split('')\n            .filter(\n                (symbol: string, i: number) =>\n                    this._checkSymbolMask(symbol, this.maskExpression[i]) ||\n                    (this.maskSpecialCharacters.includes(this.maskExpression[i]) && symbol === this.maskExpression[i])\n            );\n        if (compare.join('') === res) {\n            return compare.join('');\n        }\n        return res;\n    }\n\n    public shiftTypedSymbols(inputValue: string): string {\n        let symbolToReplace: string = '';\n        const newInputValue: string[] =\n            (inputValue &&\n                inputValue.split('').map((currSymbol: string, index: number) => {\n                    if (\n                        this.maskSpecialCharacters.includes(inputValue[index + 1]) &&\n                        inputValue[index + 1] !== this.maskExpression[index + 1]\n                    ) {\n                        symbolToReplace = currSymbol;\n                        return inputValue[index + 1];\n                    }\n                    if (symbolToReplace.length) {\n                        const replaceSymbol: string = symbolToReplace;\n                        symbolToReplace = '';\n                        return replaceSymbol;\n                    }\n                    return currSymbol;\n                })) ||\n            [];\n        return newInputValue.join('');\n    }\n\n    public showMaskInInput(inputVal?: string): string {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            } else {\n                return this.shownMaskExpression;\n            }\n        } else if (this.showMaskTyped) {\n            if (inputVal) {\n                return this._checkForIp(inputVal);\n            }\n            return this.maskExpression.replace(/\\w/g, '_');\n        }\n        return '';\n    }\n\n    public clearIfNotMatchFn(): void {\n        if (\n            this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !== this._formElement.value.length\n        ) {\n            this.formElementProperty = ['value', ''];\n            this.applyMask(this._formElement.value, this.maskExpression);\n        }\n    }\n\n    public set formElementProperty([name, value]: [string, string | boolean]) {\n        this._renderer.setProperty(this._formElement, name, value);\n    }\n\n    public checkSpecialCharAmount(mask: string): number {\n        const chars: string[] = mask.split('').filter((item: string) => this._findSpecialChar(item));\n        return chars.length;\n    }\n\n    // tslint:disable-next-line: cyclomatic-complexity\n    private _checkForIp(inputVal: string): string {\n        if (inputVal === '#') {\n            return '_._._._';\n        }\n        const arr: string[] = [];\n        for (let i: number = 0; i < inputVal.length; i++) {\n            if (inputVal[i].match('\\\\d')) {\n                arr.push(inputVal[i]);\n            }\n        }\n        if (arr.length <= 3) {\n            return '_._._';\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return '_._';\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return '_';\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n\n    private formControlResult(inputValue: string): void {\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(\n                this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)\n            );\n        } else if (this.dropSpecialCharacters) {\n            this.onChange(this._checkSymbols(inputValue));\n        } else {\n            this.onChange(this._removeSuffix(this._removePrefix(inputValue)));\n        }\n    }\n\n    private _removeMask(value: string, specialCharactersForRemove: string[]): string {\n        return value ? value.replace(this._regExpForRemove(specialCharactersForRemove), '') : value;\n    }\n\n    private _removePrefix(value: string): string {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, '') : value;\n    }\n\n    private _removeSuffix(value: string): string {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, '') : value;\n    }\n\n    private _regExpForRemove(specialCharactersForRemove: string[]): RegExp {\n        return new RegExp(specialCharactersForRemove.map((item: string) => `\\\\${item}`).join('|'), 'gi');\n    }\n\n    private _checkSymbols(result: string): string | number | undefined | null {\n        // TODO should simplify this code\n        let separatorValue: number | null = this.testFn(Separators.SEPARATOR, this.maskExpression);\n        if (separatorValue && this.isNumberValue) {\n            // tslint:disable-next-line:max-line-length\n            return result === ''\n                ? result\n                : result === ','\n                ? null\n                : Number(\n                      this._removeMask(\n                          this._removeSuffix(this._removePrefix(result)),\n                          this.maskSpecialCharacters\n                      ).replace(',', '.')\n                  );\n        }\n        separatorValue = this.testFn(Separators.DOT_SEPARATOR, this.maskExpression);\n        if (separatorValue && this.isNumberValue) {\n            // tslint:disable-next-line:max-line-length\n            return result === ''\n                ? result\n                : result === ','\n                ? null\n                : Number(\n                      this._removeMask(\n                          this._removeSuffix(this._removePrefix(result)),\n                          this.maskSpecialCharacters\n                      ).replace(',', '.')\n                  );\n        }\n        separatorValue = this.testFn(Separators.COMMA_SEPARATOR, this.maskExpression);\n        if (separatorValue && this.isNumberValue) {\n            // tslint:disable-next-line:max-line-length\n            return result === ''\n                ? result\n                : result === '.'\n                ? null\n                : Number(this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters));\n        }\n        if (this.isNumberValue) {\n            return result === ''\n                ? result\n                : Number(this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters));\n        } else if (\n            this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters).indexOf(\n                ','\n            ) !== -1\n        ) {\n            return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters).replace(\n                ',',\n                '.'\n            );\n        } else {\n            return this._removeMask(this._removeSuffix(this._removePrefix(result)), this.maskSpecialCharacters);\n        }\n    }\n\n    // TODO should think about helpers\n    private testFn(baseSeparator: string, maskExpretion: string): number | null {\n        const matcher: RegExpMatchArray | null = maskExpretion.match(new RegExp(`^${baseSeparator}\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n}\n","import { ControlValueAccessor, FormControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors } from '@angular/forms';\nimport { CustomKeyboardEvent } from './custom-keyboard-event';\nimport { Directive, forwardRef, HostListener, Inject, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { IConfig, withoutValidation } from './config';\nimport { MaskService } from './mask.service';\n\n@Directive({\n    selector: '[mask]',\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MaskDirective),\n            multi: true,\n        },\n        MaskService,\n    ],\n})\nexport class MaskDirective implements ControlValueAccessor, OnChanges {\n    @Input('mask') public maskExpression: string = '';\n    @Input() public specialCharacters: IConfig['specialCharacters'] = [];\n    @Input() public patterns: IConfig['patterns'] = {};\n    @Input() public prefix: IConfig['prefix'] = '';\n    @Input() public suffix: IConfig['suffix'] = '';\n    @Input() public dropSpecialCharacters: IConfig['dropSpecialCharacters'] | null = null;\n    @Input() public hiddenInput: IConfig['hiddenInput'] | null = null;\n    @Input() public showMaskTyped: IConfig['showMaskTyped'] | null = null;\n    @Input() public shownMaskExpression: IConfig['shownMaskExpression'] | null = null;\n    @Input() public showTemplate: IConfig['showTemplate'] | null = null;\n    @Input() public clearIfNotMatch: IConfig['clearIfNotMatch'] | null = null;\n    @Input() public validation: IConfig['validation'] | null = null;\n    private _maskValue!: string;\n    private _inputValue!: string;\n    private _position: number | null = null;\n    // tslint:disable-next-line\n    private _start!: number;\n    private _end!: number;\n    private _code!: string;\n    // tslint:disable-next-line\n    public onChange = (_: any) => {};\n    public onTouch = () => {};\n\n    public constructor(\n        // tslint:disable-next-line\n        @Inject(DOCUMENT) private document: any,\n        private _maskService: MaskService\n    ) {}\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        // tslint:disable-next-line:max-line-length\n        const {\n            maskExpression,\n            specialCharacters,\n            patterns,\n            prefix,\n            suffix,\n            dropSpecialCharacters,\n            hiddenInput,\n            showMaskTyped,\n            shownMaskExpression,\n            showTemplate,\n            clearIfNotMatch,\n            validation,\n        } = changes;\n        if (maskExpression) {\n            this._maskValue = changes.maskExpression.currentValue || '';\n        }\n        if (specialCharacters) {\n            if (\n                !specialCharacters.currentValue ||\n                !Array.isArray(specialCharacters.currentValue) ||\n                (Array.isArray(specialCharacters.currentValue) && !specialCharacters.currentValue.length)\n            ) {\n                return;\n            }\n            this._maskService.maskSpecialCharacters = changes.specialCharacters.currentValue || '';\n        }\n        if (patterns) {\n            this._maskService.maskAvailablePatterns = patterns.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (showTemplate) {\n            this._maskService.showTemplate = showTemplate.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        this._applyMask();\n    }\n\n    // tslint:disable-next-line: cyclomatic-complexity\n    public validate({ value }: FormControl): ValidationErrors | null {\n        if (!this._maskService.validation) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return { 'Mask error': true };\n        }\n        if (\n            this._maskValue.startsWith('dot_separator') ||\n            this._maskValue.startsWith('comma_separator') ||\n            this._maskValue.startsWith('separator')\n        ) {\n            return null;\n        }\n        if (withoutValidation.includes(this._maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (value && value.toString().length >= 1) {\n            let counterOfOpt: number = 0;\n            for (const key in this._maskService.maskAvailablePatterns) {\n                if (\n                    this._maskService.maskAvailablePatterns[key].optional &&\n                    this._maskService.maskAvailablePatterns[key].optional === true\n                ) {\n                    if (this._maskValue.indexOf(key) !== this._maskValue.lastIndexOf(key)) {\n                        const opt: string = this._maskValue\n                            .split('')\n                            .filter((i: string) => i === key)\n                            .join('');\n                        counterOfOpt += opt.length;\n                    } else if (this._maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (\n                        this._maskValue.indexOf(key) !== -1 &&\n                        value.toString().length >= this._maskValue.indexOf(key)\n                    ) {\n                        return null;\n                    }\n                    if (counterOfOpt === this._maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if (\n                this._maskValue.indexOf('*') === 1 ||\n                this._maskValue.indexOf('?') === 1 ||\n                this._maskValue.indexOf('{') === 1\n            ) {\n                return null;\n            } else if (\n                (this._maskValue.indexOf('*') > 1 && value.toString().length < this._maskValue.indexOf('*')) ||\n                (this._maskValue.indexOf('?') > 1 && value.toString().length < this._maskValue.indexOf('?'))\n            ) {\n                return { 'Mask error': true };\n            }\n            if (this._maskValue.indexOf('*') === -1 || this._maskValue.indexOf('?') === -1) {\n                const length: number = this._maskService.dropSpecialCharacters\n                    ? this._maskValue.length - this._maskService.checkSpecialCharAmount(this._maskValue) - counterOfOpt\n                    : this._maskValue.length - counterOfOpt;\n                if (value.toString().length < length) {\n                    return { 'Mask error': true };\n                }\n            }\n        }\n        return null;\n    }\n\n    @HostListener('input', ['$event'])\n    public onInput(e: CustomKeyboardEvent): void {\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        this._inputValue = el.value;\n        if (!this._maskValue) {\n            this.onChange(el.value);\n            return;\n        }\n        const position: number =\n            el.selectionStart === 1\n                ? (el.selectionStart as number) + this._maskService.prefix.length\n                : (el.selectionStart as number);\n        let caretShift: number = 0;\n        let backspaceShift: boolean = false;\n        this._maskService.applyValueChanges(position, (shift: number, _backspaceShift: boolean) => {\n            caretShift = shift;\n            backspaceShift = _backspaceShift;\n        });\n        // only set the selection if the element is active\n        if (this.document.activeElement !== el) {\n            return;\n        }\n        this._position = this._position === 1 && this._inputValue.length === 1 ? null : this._position;\n\n        const positionToApply: number = this._position\n            ? this._inputValue.length + position + caretShift\n            : position + (this._code === 'Backspace' && !backspaceShift ? 0 : caretShift);\n\n        el.setSelectionRange(positionToApply, positionToApply);\n\n        this._position = null;\n    }\n\n    @HostListener('blur')\n    public onBlur(): void {\n        this._maskService.clearIfNotMatchFn();\n        this.onTouch();\n    }\n\n    @HostListener('click', ['$event'])\n    public onFocus(e: MouseEvent | CustomKeyboardEvent): void {\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        const posStart: number = 0;\n        const posEnd: number = 0;\n        if (\n            el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            // tslint:disable-next-line\n            (e as any).keyCode !== 38\n        )\n            if (this._maskService.showMaskTyped) {\n                // ) {\n                //     return;\n                // }\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange && this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                } else if (el.setSelectionRange && this._maskService.maskIsShown !== el.value) {\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n            }\n        const nextValue: string | null =\n            !el.value || el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value;\n\n        /** Fix of cursor position jumping to end in most browsers no matter where cursor is inserted onFocus */\n        if (el.value !== nextValue) {\n            el.value = nextValue;\n        }\n\n        /** fix of cursor position with prefix when mouse click occur */\n        if (((el.selectionStart as number) || (el.selectionEnd as number)) <= this._maskService.prefix.length) {\n            el.selectionStart = this._maskService.prefix.length;\n            return;\n        }\n    }\n\n    @HostListener('keydown', ['$event'])\n    public a(e: CustomKeyboardEvent): void {\n        this._code = e.code ? e.code : e.key;\n        const el: HTMLInputElement = e.target as HTMLInputElement;\n        this._maskService.selStart = el.selectionStart;\n        this._maskService.selEnd = el.selectionEnd;\n        if (e.keyCode === 38) {\n            e.preventDefault();\n        }\n        if (e.keyCode === 37 || e.keyCode === 8) {\n            // if (e.keyCode === 37) {\n            //     el.selectionStart = (el.selectionEnd as number) - 1;\n            // }\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (e.keyCode === 8 && el.value.length === 0) {\n                el.selectionStart = el.selectionEnd;\n            }\n            if (\n                (el.selectionStart as number) <= this._maskService.prefix.length &&\n                (el.selectionEnd as number) <= this._maskService.prefix.length\n            ) {\n                e.preventDefault();\n            }\n            const cursorStart: number | null = el.selectionStart;\n            // this.onFocus(e);\n            if (\n                e.keyCode === 8 &&\n                !el.readOnly &&\n                cursorStart === 0 &&\n                el.selectionEnd === el.value.length &&\n                el.value.length !== 0\n            ) {\n                this._position = this._maskService.prefix ? this._maskService.prefix.length : 0;\n                this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position);\n            }\n        }\n    }\n\n    @HostListener('paste')\n    public onPaste(): void {\n        this._position = Number.MAX_SAFE_INTEGER;\n    }\n\n    /** It writes the value in the input */\n    public async writeValue(inputValue: string | number): Promise<void> {\n        if (inputValue === undefined) {\n            inputValue = '';\n        }\n        if (typeof inputValue === 'number') {\n            inputValue = String(inputValue);\n            inputValue = this._maskValue.startsWith('dot_separator') ? inputValue.replace('.', ',') : inputValue;\n            this._maskService.isNumberValue = true;\n        }\n        (inputValue && this._maskService.maskExpression) ||\n        (this._maskService.maskExpression && (this._maskService.prefix || this._maskService.showMaskTyped))\n            ? (this._maskService.formElementProperty = [\n                  'value',\n                  this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n              ])\n            : (this._maskService.formElementProperty = ['value', inputValue]);\n        this._inputValue = inputValue;\n    }\n\n    // tslint:disable-next-line\n    public registerOnChange(fn: any): void {\n        this.onChange = fn;\n        this._maskService.onChange = this.onChange;\n    }\n\n    // tslint:disable-next-line\n    public registerOnTouched(fn: any): void {\n        this.onTouch = fn;\n    }\n\n    /** It disables the input element */\n    public setDisabledState(isDisabled: boolean): void {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n\n    private _repeatPatternSymbols(maskExp: string): string {\n        return (\n            (maskExp.match(/{[0-9]+}/) &&\n                maskExp.split('').reduce((accum: string, currval: string, index: number): string => {\n                    this._start = currval === '{' ? index : this._start;\n\n                    if (currval !== '}') {\n                        return this._maskService._findSpecialChar(currval) ? accum + currval : accum;\n                    }\n                    this._end = index;\n                    const repeatNumber: number = Number(maskExp.slice(this._start + 1, this._end));\n                    const repaceWith: string = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                    return accum + repaceWith;\n                }, '')) ||\n            maskExp\n        );\n    }\n    // tslint:disable-next-line:no-any\n    private _applyMask(): any {\n        this._maskService.maskExpression = this._repeatPatternSymbols(this._maskValue || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue, this._maskService.maskExpression),\n        ];\n    }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { MaskApplierService } from './mask-applier.service';\nimport { IConfig } from './config';\n\n@Pipe({\n    name: 'mask',\n    pure: true,\n})\nexport class MaskPipe implements PipeTransform {\n    public constructor(private _maskService: MaskApplierService) {}\n\n    public transform(value: string | number, mask: string | [string, IConfig['patterns']]): string {\n        if (!value && typeof value !== 'number') {\n            return '';\n        }\n        if (typeof mask === 'string') {\n            return this._maskService.applyMask(`${value}`, mask);\n        }\n        return this._maskService.applyMaskWithPattern(`${value}`, mask);\n    }\n}\n","import { config, INITIAL_CONFIG, initialConfig, NEW_CONFIG, optionsConfig } from './config';\nimport { MaskApplierService } from './mask-applier.service';\nimport { MaskDirective } from './mask.directive';\nimport { MaskPipe } from './mask.pipe';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\n\n@NgModule({\n    exports: [MaskDirective, MaskPipe],\n    declarations: [MaskDirective, MaskPipe],\n})\nexport class NgxMaskModule {\n    public static forRoot(configValue?: optionsConfig | (() => optionsConfig)): ModuleWithProviders {\n        return {\n            ngModule: NgxMaskModule,\n            providers: [\n                {\n                    provide: NEW_CONFIG,\n                    useValue: configValue,\n                },\n                {\n                    provide: INITIAL_CONFIG,\n                    useValue: initialConfig,\n                },\n                {\n                    provide: config,\n                    useFactory: _configFactory,\n                    deps: [INITIAL_CONFIG, NEW_CONFIG],\n                },\n                MaskApplierService,\n            ],\n        };\n    }\n    public static forChild(_configValue?: optionsConfig): ModuleWithProviders {\n        return {\n            ngModule: NgxMaskModule,\n        };\n    }\n}\n\n/**\n * @internal\n */\nexport function _configFactory(\n    initConfig: optionsConfig,\n    configValue: optionsConfig | (() => optionsConfig)\n): optionsConfig {\n    return configValue instanceof Function ? { ...initConfig, ...configValue() } : { ...initConfig, ...configValue };\n}\n"],"names":["tslib_1.__param","tslib_1.__extends","tslib_1.__decorate"],"mappings":"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"}